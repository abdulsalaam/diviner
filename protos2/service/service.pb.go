// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service/service.proto

/*
Package service is a generated protocol buffer package.

It is generated from these files:
	service/service.proto

It has these top-level messages:
	QueryRequest
	MemberCreateRequest
	MemberInfoResponse
	EventCreateRequest
	EventInfoResponse
	MarketCreateRequest
	MarketInfoResponse
	TxRequest
	TxResponse
*/
package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "diviner/protos/common"
import member "diviner/protos/member"
import lmsr "diviner/protos/lmsr"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type QueryRequest struct {
	Id    string               `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Check *common.Verification `protobuf:"bytes,999,opt,name=check" json:"check,omitempty"`
}

func (m *QueryRequest) Reset()                    { *m = QueryRequest{} }
func (m *QueryRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()               {}
func (*QueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *QueryRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *QueryRequest) GetCheck() *common.Verification {
	if m != nil {
		return m.Check
	}
	return nil
}

type MemberCreateRequest struct {
	Member *member.Member       `protobuf:"bytes,1,opt,name=member" json:"member,omitempty"`
	Check  *common.Verification `protobuf:"bytes,999,opt,name=check" json:"check,omitempty"`
}

func (m *MemberCreateRequest) Reset()                    { *m = MemberCreateRequest{} }
func (m *MemberCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*MemberCreateRequest) ProtoMessage()               {}
func (*MemberCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MemberCreateRequest) GetMember() *member.Member {
	if m != nil {
		return m.Member
	}
	return nil
}

func (m *MemberCreateRequest) GetCheck() *common.Verification {
	if m != nil {
		return m.Check
	}
	return nil
}

type MemberInfoResponse struct {
	Member *member.Member             `protobuf:"bytes,1,opt,name=member" json:"member,omitempty"`
	Time   *google_protobuf.Timestamp `protobuf:"bytes,999,opt,name=time" json:"time,omitempty"`
}

func (m *MemberInfoResponse) Reset()                    { *m = MemberInfoResponse{} }
func (m *MemberInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*MemberInfoResponse) ProtoMessage()               {}
func (*MemberInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MemberInfoResponse) GetMember() *member.Member {
	if m != nil {
		return m.Member
	}
	return nil
}

func (m *MemberInfoResponse) GetTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

type EventCreateRequest struct {
	User    string               `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Title   string               `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Outcome []string             `protobuf:"bytes,3,rep,name=outcome" json:"outcome,omitempty"`
	Check   *common.Verification `protobuf:"bytes,999,opt,name=check" json:"check,omitempty"`
}

func (m *EventCreateRequest) Reset()                    { *m = EventCreateRequest{} }
func (m *EventCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*EventCreateRequest) ProtoMessage()               {}
func (*EventCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *EventCreateRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *EventCreateRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *EventCreateRequest) GetOutcome() []string {
	if m != nil {
		return m.Outcome
	}
	return nil
}

func (m *EventCreateRequest) GetCheck() *common.Verification {
	if m != nil {
		return m.Check
	}
	return nil
}

type EventInfoResponse struct {
	Event *lmsr.Event                `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
	Time  *google_protobuf.Timestamp `protobuf:"bytes,999,opt,name=time" json:"time,omitempty"`
}

func (m *EventInfoResponse) Reset()                    { *m = EventInfoResponse{} }
func (m *EventInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*EventInfoResponse) ProtoMessage()               {}
func (*EventInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *EventInfoResponse) GetEvent() *lmsr.Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *EventInfoResponse) GetTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

type MarketCreateRequest struct {
	User   string               `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Event  string               `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
	Num    float64              `protobuf:"fixed64,3,opt,name=num" json:"num,omitempty"`
	IsFund bool                 `protobuf:"varint,4,opt,name=isFund" json:"isFund,omitempty"`
	Check  *common.Verification `protobuf:"bytes,999,opt,name=check" json:"check,omitempty"`
}

func (m *MarketCreateRequest) Reset()                    { *m = MarketCreateRequest{} }
func (m *MarketCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*MarketCreateRequest) ProtoMessage()               {}
func (*MarketCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *MarketCreateRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *MarketCreateRequest) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *MarketCreateRequest) GetNum() float64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *MarketCreateRequest) GetIsFund() bool {
	if m != nil {
		return m.IsFund
	}
	return false
}

func (m *MarketCreateRequest) GetCheck() *common.Verification {
	if m != nil {
		return m.Check
	}
	return nil
}

type MarketInfoResponse struct {
	Market *lmsr.Market               `protobuf:"bytes,1,opt,name=market" json:"market,omitempty"`
	Time   *google_protobuf.Timestamp `protobuf:"bytes,999,opt,name=time" json:"time,omitempty"`
}

func (m *MarketInfoResponse) Reset()                    { *m = MarketInfoResponse{} }
func (m *MarketInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*MarketInfoResponse) ProtoMessage()               {}
func (*MarketInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *MarketInfoResponse) GetMarket() *lmsr.Market {
	if m != nil {
		return m.Market
	}
	return nil
}

func (m *MarketInfoResponse) GetTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

type TxRequest struct {
	User   string               `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	IsBuy  bool                 `protobuf:"varint,2,opt,name=isBuy" json:"isBuy,omitempty"`
	Share  string               `protobuf:"bytes,3,opt,name=share" json:"share,omitempty"`
	Volume float64              `protobuf:"fixed64,4,opt,name=volume" json:"volume,omitempty"`
	Check  *common.Verification `protobuf:"bytes,999,opt,name=check" json:"check,omitempty"`
}

func (m *TxRequest) Reset()                    { *m = TxRequest{} }
func (m *TxRequest) String() string            { return proto.CompactTextString(m) }
func (*TxRequest) ProtoMessage()               {}
func (*TxRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *TxRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *TxRequest) GetIsBuy() bool {
	if m != nil {
		return m.IsBuy
	}
	return false
}

func (m *TxRequest) GetShare() string {
	if m != nil {
		return m.Share
	}
	return ""
}

func (m *TxRequest) GetVolume() float64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *TxRequest) GetCheck() *common.Verification {
	if m != nil {
		return m.Check
	}
	return nil
}

type TxResponse struct {
	Price float64                    `protobuf:"fixed64,1,opt,name=price" json:"price,omitempty"`
	Time  *google_protobuf.Timestamp `protobuf:"bytes,999,opt,name=time" json:"time,omitempty"`
}

func (m *TxResponse) Reset()                    { *m = TxResponse{} }
func (m *TxResponse) String() string            { return proto.CompactTextString(m) }
func (*TxResponse) ProtoMessage()               {}
func (*TxResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *TxResponse) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *TxResponse) GetTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryRequest)(nil), "service.QueryRequest")
	proto.RegisterType((*MemberCreateRequest)(nil), "service.MemberCreateRequest")
	proto.RegisterType((*MemberInfoResponse)(nil), "service.MemberInfoResponse")
	proto.RegisterType((*EventCreateRequest)(nil), "service.EventCreateRequest")
	proto.RegisterType((*EventInfoResponse)(nil), "service.EventInfoResponse")
	proto.RegisterType((*MarketCreateRequest)(nil), "service.MarketCreateRequest")
	proto.RegisterType((*MarketInfoResponse)(nil), "service.MarketInfoResponse")
	proto.RegisterType((*TxRequest)(nil), "service.TxRequest")
	proto.RegisterType((*TxResponse)(nil), "service.TxResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DivinerSerivce service

type DivinerSerivceClient interface {
	QueryMember(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*MemberInfoResponse, error)
	CreateMember(ctx context.Context, in *MemberCreateRequest, opts ...grpc.CallOption) (*MemberInfoResponse, error)
	QueryEvent(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*EventInfoResponse, error)
	CreateEvent(ctx context.Context, in *EventCreateRequest, opts ...grpc.CallOption) (*EventInfoResponse, error)
	QueryMarket(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*MarketInfoResponse, error)
	CreateMarket(ctx context.Context, in *MarketCreateRequest, opts ...grpc.CallOption) (*MarketInfoResponse, error)
	Tx(ctx context.Context, in *TxRequest, opts ...grpc.CallOption) (*TxResponse, error)
}

type divinerSerivceClient struct {
	cc *grpc.ClientConn
}

func NewDivinerSerivceClient(cc *grpc.ClientConn) DivinerSerivceClient {
	return &divinerSerivceClient{cc}
}

func (c *divinerSerivceClient) QueryMember(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*MemberInfoResponse, error) {
	out := new(MemberInfoResponse)
	err := grpc.Invoke(ctx, "/service.DivinerSerivce/QueryMember", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *divinerSerivceClient) CreateMember(ctx context.Context, in *MemberCreateRequest, opts ...grpc.CallOption) (*MemberInfoResponse, error) {
	out := new(MemberInfoResponse)
	err := grpc.Invoke(ctx, "/service.DivinerSerivce/CreateMember", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *divinerSerivceClient) QueryEvent(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*EventInfoResponse, error) {
	out := new(EventInfoResponse)
	err := grpc.Invoke(ctx, "/service.DivinerSerivce/QueryEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *divinerSerivceClient) CreateEvent(ctx context.Context, in *EventCreateRequest, opts ...grpc.CallOption) (*EventInfoResponse, error) {
	out := new(EventInfoResponse)
	err := grpc.Invoke(ctx, "/service.DivinerSerivce/CreateEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *divinerSerivceClient) QueryMarket(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*MarketInfoResponse, error) {
	out := new(MarketInfoResponse)
	err := grpc.Invoke(ctx, "/service.DivinerSerivce/QueryMarket", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *divinerSerivceClient) CreateMarket(ctx context.Context, in *MarketCreateRequest, opts ...grpc.CallOption) (*MarketInfoResponse, error) {
	out := new(MarketInfoResponse)
	err := grpc.Invoke(ctx, "/service.DivinerSerivce/CreateMarket", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *divinerSerivceClient) Tx(ctx context.Context, in *TxRequest, opts ...grpc.CallOption) (*TxResponse, error) {
	out := new(TxResponse)
	err := grpc.Invoke(ctx, "/service.DivinerSerivce/Tx", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DivinerSerivce service

type DivinerSerivceServer interface {
	QueryMember(context.Context, *QueryRequest) (*MemberInfoResponse, error)
	CreateMember(context.Context, *MemberCreateRequest) (*MemberInfoResponse, error)
	QueryEvent(context.Context, *QueryRequest) (*EventInfoResponse, error)
	CreateEvent(context.Context, *EventCreateRequest) (*EventInfoResponse, error)
	QueryMarket(context.Context, *QueryRequest) (*MarketInfoResponse, error)
	CreateMarket(context.Context, *MarketCreateRequest) (*MarketInfoResponse, error)
	Tx(context.Context, *TxRequest) (*TxResponse, error)
}

func RegisterDivinerSerivceServer(s *grpc.Server, srv DivinerSerivceServer) {
	s.RegisterService(&_DivinerSerivce_serviceDesc, srv)
}

func _DivinerSerivce_QueryMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DivinerSerivceServer).QueryMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.DivinerSerivce/QueryMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DivinerSerivceServer).QueryMember(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DivinerSerivce_CreateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DivinerSerivceServer).CreateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.DivinerSerivce/CreateMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DivinerSerivceServer).CreateMember(ctx, req.(*MemberCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DivinerSerivce_QueryEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DivinerSerivceServer).QueryEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.DivinerSerivce/QueryEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DivinerSerivceServer).QueryEvent(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DivinerSerivce_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DivinerSerivceServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.DivinerSerivce/CreateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DivinerSerivceServer).CreateEvent(ctx, req.(*EventCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DivinerSerivce_QueryMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DivinerSerivceServer).QueryMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.DivinerSerivce/QueryMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DivinerSerivceServer).QueryMarket(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DivinerSerivce_CreateMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DivinerSerivceServer).CreateMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.DivinerSerivce/CreateMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DivinerSerivceServer).CreateMarket(ctx, req.(*MarketCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DivinerSerivce_Tx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DivinerSerivceServer).Tx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.DivinerSerivce/Tx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DivinerSerivceServer).Tx(ctx, req.(*TxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DivinerSerivce_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.DivinerSerivce",
	HandlerType: (*DivinerSerivceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryMember",
			Handler:    _DivinerSerivce_QueryMember_Handler,
		},
		{
			MethodName: "CreateMember",
			Handler:    _DivinerSerivce_CreateMember_Handler,
		},
		{
			MethodName: "QueryEvent",
			Handler:    _DivinerSerivce_QueryEvent_Handler,
		},
		{
			MethodName: "CreateEvent",
			Handler:    _DivinerSerivce_CreateEvent_Handler,
		},
		{
			MethodName: "QueryMarket",
			Handler:    _DivinerSerivce_QueryMarket_Handler,
		},
		{
			MethodName: "CreateMarket",
			Handler:    _DivinerSerivce_CreateMarket_Handler,
		},
		{
			MethodName: "Tx",
			Handler:    _DivinerSerivce_Tx_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/service.proto",
}

func init() { proto.RegisterFile("service/service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 581 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xad, 0x93, 0x26, 0x6d, 0x26, 0x51, 0x80, 0x4d, 0x8a, 0x2c, 0xb7, 0x12, 0x21, 0x42, 0x28,
	0x12, 0x92, 0x2d, 0x85, 0x2f, 0x80, 0x02, 0x02, 0x55, 0x3d, 0xb0, 0x8d, 0xb8, 0x3b, 0xce, 0x24,
	0x5d, 0x92, 0xf5, 0x86, 0xb5, 0x1d, 0xb5, 0x1f, 0xc0, 0x9d, 0x13, 0xbf, 0xc8, 0x9d, 0x2f, 0x40,
	0xde, 0x59, 0x47, 0xb8, 0xa1, 0xa4, 0x3e, 0xad, 0x67, 0xe6, 0x79, 0xe6, 0xbd, 0xa7, 0xd9, 0x85,
	0x93, 0x04, 0xf5, 0x46, 0x44, 0x18, 0xd8, 0xd3, 0x5f, 0x6b, 0x95, 0x2a, 0x76, 0x64, 0x43, 0xaf,
	0x17, 0x29, 0x29, 0x55, 0x1c, 0xd0, 0x41, 0x55, 0xaf, 0x27, 0x51, 0x4e, 0x51, 0x07, 0x74, 0xd8,
	0xe4, 0xa3, 0x95, 0x4c, 0x74, 0x30, 0x0b, 0xd3, 0xd0, 0x26, 0x9e, 0x2d, 0x94, 0x5a, 0xac, 0x30,
	0x30, 0xd1, 0x34, 0x9b, 0x07, 0xa9, 0x90, 0x98, 0xa4, 0xa1, 0x5c, 0x13, 0x60, 0x78, 0x01, 0x9d,
	0xcf, 0x19, 0xea, 0x5b, 0x8e, 0xdf, 0x32, 0x4c, 0x52, 0xd6, 0x85, 0x9a, 0x98, 0xb9, 0xce, 0xc0,
	0x19, 0xb5, 0x78, 0x4d, 0xcc, 0xd8, 0x2b, 0x68, 0x44, 0xd7, 0x18, 0x2d, 0xdd, 0x5f, 0x47, 0x03,
	0x67, 0xd4, 0x1e, 0xf7, 0x7d, 0xcb, 0xe2, 0x0b, 0x6a, 0x31, 0x17, 0x51, 0x98, 0x0a, 0x15, 0x73,
	0xc2, 0x0c, 0xbf, 0x42, 0xef, 0xd2, 0xd0, 0x39, 0xd7, 0x18, 0xa6, 0x58, 0xf4, 0x7c, 0x09, 0x4d,
	0x62, 0x69, 0xfa, 0xb6, 0xc7, 0x5d, 0xdf, 0x92, 0x26, 0x30, 0xb7, 0xd5, 0x6a, 0xb3, 0x24, 0x30,
	0xfa, 0xfd, 0x53, 0x3c, 0x57, 0x1c, 0x93, 0xb5, 0x8a, 0x13, 0x7c, 0xf0, 0xa8, 0x00, 0x0e, 0x73,
	0x27, 0x8a, 0x49, 0x9e, 0x4f, 0x3e, 0xf9, 0x85, 0x4f, 0xfe, 0xa4, 0xf0, 0x89, 0x1b, 0xe0, 0xf0,
	0xbb, 0x03, 0xec, 0xfd, 0x06, 0xe3, 0xb4, 0x2c, 0x8d, 0xc1, 0x61, 0x96, 0xd8, 0x69, 0x2d, 0x6e,
	0xbe, 0x59, 0x1f, 0x1a, 0xa9, 0x48, 0x57, 0xe8, 0xd6, 0x4c, 0x92, 0x02, 0xe6, 0xc2, 0x91, 0xca,
	0xd2, 0x48, 0x49, 0x74, 0xeb, 0x83, 0xfa, 0xa8, 0xc5, 0x8b, 0xb0, 0x9a, 0xec, 0x05, 0x3c, 0x31,
	0x34, 0x4a, 0xaa, 0x9f, 0x43, 0x03, 0xf3, 0xa4, 0x15, 0xdd, 0xf6, 0xf3, 0x35, 0xf0, 0x0d, 0x8e,
	0x53, 0xa5, 0xba, 0xe0, 0x9f, 0x0e, 0xf4, 0x2e, 0x43, 0xbd, 0xc4, 0x87, 0x29, 0xa6, 0xf9, 0x56,
	0x31, 0x8d, 0x7c, 0x0c, 0xf5, 0x38, 0x93, 0x6e, 0x7d, 0xe0, 0x8c, 0x1c, 0x9e, 0x7f, 0xb2, 0xa7,
	0xd0, 0x14, 0xc9, 0x87, 0x2c, 0x9e, 0xb9, 0x87, 0x03, 0x67, 0x74, 0xcc, 0x6d, 0x54, 0xcd, 0x81,
	0x25, 0x30, 0xe2, 0x55, 0xb2, 0xe0, 0x05, 0x34, 0xa5, 0xc9, 0x5a, 0x0f, 0x3a, 0xe4, 0x01, 0x21,
	0xb9, 0xad, 0x55, 0x77, 0xe1, 0x87, 0x03, 0xad, 0xc9, 0xcd, 0x1e, 0xed, 0x22, 0x79, 0x9b, 0xdd,
	0x1a, 0xed, 0xc7, 0x9c, 0x82, 0x3c, 0x9b, 0x5c, 0x87, 0x1a, 0x8d, 0xfa, 0x16, 0xa7, 0x20, 0xd7,
	0xbf, 0x51, 0xab, 0x4c, 0xa2, 0xd1, 0xef, 0x70, 0x1b, 0x55, 0xd3, 0x7f, 0x05, 0x90, 0x33, 0xb2,
	0xba, 0xfb, 0xd0, 0x58, 0x6b, 0x11, 0xa1, 0xe1, 0xe4, 0x70, 0x0a, 0x2a, 0xeb, 0x1c, 0xff, 0xae,
	0x43, 0xf7, 0x9d, 0xd8, 0x88, 0x18, 0xf5, 0x15, 0x6a, 0xb1, 0x89, 0x90, 0x9d, 0x43, 0xdb, 0xbc,
	0x0c, 0x74, 0x73, 0xd8, 0x89, 0x5f, 0xbc, 0x4e, 0x7f, 0xbf, 0x17, 0xde, 0xe9, 0x36, 0xbd, 0x7b,
	0x1b, 0x87, 0x07, 0xec, 0x02, 0x3a, 0xb4, 0x3e, 0xb6, 0xcb, 0xd9, 0x1d, 0x78, 0x69, 0xb7, 0xf6,
	0x35, 0x7b, 0x03, 0x60, 0x66, 0x9b, 0xc5, 0xbe, 0x8f, 0x90, 0xb7, 0x4d, 0xef, 0xdc, 0x93, 0xe1,
	0x01, 0xfb, 0x08, 0x6d, 0x1a, 0x49, 0x3d, 0x4e, 0xcb, 0xe0, 0x32, 0x9b, 0xff, 0x77, 0xda, 0xda,
	0x43, 0x9b, 0xb5, 0xdf, 0x9e, 0x9d, 0x9d, 0x2d, 0xd9, 0x43, 0x5d, 0xce, 0xee, 0xc0, 0xef, 0xb5,
	0xe7, 0x5f, 0xcd, 0x02, 0xa8, 0x4d, 0x6e, 0x18, 0xdb, 0x82, 0xb6, 0x7b, 0xeb, 0xf5, 0x4a, 0xb9,
	0xe2, 0x87, 0x69, 0xd3, 0xac, 0xc3, 0xeb, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x74, 0x8c, 0x4c,
	0x40, 0x80, 0x06, 0x00, 0x00,
}
