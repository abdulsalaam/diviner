// Code generated by protoc-gen-go. DO NOT EDIT.
// source: lmsr/market.proto

package lmsr

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Market struct {
	Id        string             `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	User      string             `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	Event     string             `protobuf:"bytes,3,opt,name=event" json:"event,omitempty"`
	Liquidity float64            `protobuf:"fixed64,4,opt,name=liquidity" json:"liquidity,omitempty"`
	Fund      float64            `protobuf:"fixed64,5,opt,name=fund" json:"fund,omitempty"`
	Cost      float64            `protobuf:"fixed64,6,opt,name=cost" json:"cost,omitempty"`
	Shares    map[string]float64 `protobuf:"bytes,7,rep,name=shares" json:"shares,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	Prices    map[string]float64 `protobuf:"bytes,8,rep,name=prices" json:"prices,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	Settled   bool               `protobuf:"varint,9,opt,name=settled" json:"settled,omitempty"`
}

func (m *Market) Reset()                    { *m = Market{} }
func (m *Market) String() string            { return proto.CompactTextString(m) }
func (*Market) ProtoMessage()               {}
func (*Market) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Market) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Market) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *Market) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *Market) GetLiquidity() float64 {
	if m != nil {
		return m.Liquidity
	}
	return 0
}

func (m *Market) GetFund() float64 {
	if m != nil {
		return m.Fund
	}
	return 0
}

func (m *Market) GetCost() float64 {
	if m != nil {
		return m.Cost
	}
	return 0
}

func (m *Market) GetShares() map[string]float64 {
	if m != nil {
		return m.Shares
	}
	return nil
}

func (m *Market) GetPrices() map[string]float64 {
	if m != nil {
		return m.Prices
	}
	return nil
}

func (m *Market) GetSettled() bool {
	if m != nil {
		return m.Settled
	}
	return false
}

type Markets struct {
	List []*Market `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *Markets) Reset()                    { *m = Markets{} }
func (m *Markets) String() string            { return proto.CompactTextString(m) }
func (*Markets) ProtoMessage()               {}
func (*Markets) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *Markets) GetList() []*Market {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterType((*Market)(nil), "lmsr.Market")
	proto.RegisterType((*Markets)(nil), "lmsr.Markets")
}

func init() { proto.RegisterFile("lmsr/market.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0x3f, 0x4b, 0xc4, 0x40,
	0x10, 0xc5, 0xd9, 0x24, 0x97, 0x5c, 0xe6, 0x44, 0x74, 0xb1, 0x18, 0xc4, 0x22, 0x5c, 0x15, 0x10,
	0xa2, 0x68, 0xa3, 0xf6, 0x96, 0x82, 0xac, 0x9f, 0x20, 0x5e, 0x46, 0x5c, 0x2e, 0x97, 0x9c, 0xbb,
	0x9b, 0x83, 0x7c, 0x77, 0x0b, 0xd9, 0xd9, 0x88, 0x29, 0x6c, 0xae, 0x7b, 0xf3, 0x7b, 0xfb, 0x32,
	0x7f, 0x02, 0xe7, 0xed, 0xce, 0x9a, 0x9b, 0x5d, 0x6d, 0xb6, 0xe4, 0xaa, 0xbd, 0xe9, 0x5d, 0x2f,
	0x13, 0x8f, 0xd6, 0xdf, 0x11, 0xa4, 0x2f, 0x8c, 0xe5, 0x29, 0x44, 0xba, 0x41, 0x51, 0x88, 0x32,
	0x57, 0x91, 0x6e, 0xa4, 0x84, 0x64, 0xb0, 0x64, 0x30, 0x62, 0xc2, 0x5a, 0x5e, 0xc0, 0x82, 0x0e,
	0xd4, 0x39, 0x8c, 0x19, 0x86, 0x42, 0x5e, 0x41, 0xde, 0xea, 0xaf, 0x41, 0x37, 0xda, 0x8d, 0x98,
	0x14, 0xa2, 0x14, 0xea, 0x0f, 0xf8, 0xef, 0x7c, 0x0c, 0x5d, 0x83, 0x0b, 0x36, 0x58, 0x7b, 0xb6,
	0xe9, 0xad, 0xc3, 0x34, 0x30, 0xaf, 0xe5, 0x2d, 0xa4, 0xf6, 0xb3, 0x36, 0x64, 0x31, 0x2b, 0xe2,
	0x72, 0x75, 0x87, 0x95, 0x9f, 0xb0, 0x0a, 0xd3, 0x55, 0x6f, 0x6c, 0x3d, 0x77, 0xce, 0x8c, 0x6a,
	0x7a, 0xe7, 0x13, 0x7b, 0xa3, 0x37, 0x64, 0x71, 0xf9, 0x4f, 0xe2, 0x95, 0xad, 0x29, 0x11, 0xde,
	0x49, 0x84, 0xcc, 0x92, 0x73, 0x2d, 0x35, 0x98, 0x17, 0xa2, 0x5c, 0xaa, 0xdf, 0xf2, 0xf2, 0x11,
	0x56, 0xb3, 0x16, 0xf2, 0x0c, 0xe2, 0x2d, 0x8d, 0xd3, 0x35, 0xbc, 0xf4, 0xab, 0x1f, 0xea, 0x76,
	0x20, 0xbe, 0x87, 0x50, 0xa1, 0x78, 0x8a, 0x1e, 0x84, 0x8f, 0xce, 0x7a, 0x1d, 0x13, 0x5d, 0x5f,
	0x43, 0x16, 0xa6, 0xb5, 0xb2, 0x80, 0xa4, 0xd5, 0xd6, 0xa1, 0xe0, 0x55, 0x4e, 0xe6, 0xab, 0x28,
	0x76, 0xde, 0x53, 0xfe, 0x71, 0xf7, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x5c, 0xab, 0x70, 0x1b,
	0xcd, 0x01, 0x00, 0x00,
}
